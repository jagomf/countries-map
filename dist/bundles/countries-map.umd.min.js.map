{
  "version": 3,
  "file": "countries-map.umd.min.js",
  "sources": [
    "ng://countries-map/out/app/modules/countries-map/google-charts-loader.service.ts",
    "ng://countries-map/out/app/modules/countries-map/countries-map.component.ts",
    "ng://countries-map/out/app/modules/countries-map/countries-map.module.ts"
  ],
  "sourcesContent": [
    "declare var google: any;\r\n\r\nimport { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GoogleChartsLoaderService {\r\n\r\n  private googleScriptLoadingNotifier: EventEmitter<boolean>;\r\n  private googleScriptIsLoading: boolean;\r\n  private localeId: string;\r\n\r\n  public constructor(@Inject(LOCALE_ID) localeId: string) {\r\n    this.googleScriptLoadingNotifier = new EventEmitter();\r\n    this.googleScriptIsLoading = false;\r\n    this.localeId = localeId;\r\n  }\r\n\r\n  public load(apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.loadGoogleChartsScript().then(() => {\r\n        const initializer: any = {\r\n            packages: ['geochart'],\r\n            language: this.localeId,\r\n            callback: resolve\r\n        };\r\n        if (apiKey) {\r\n          initializer.mapsApiKey = apiKey;\r\n        }\r\n        google.charts.load('45.2', initializer);\r\n      }).catch(err => reject());\r\n    });\r\n  }\r\n\r\n  private loadGoogleChartsScript(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (typeof google !== 'undefined' && google.charts) {\r\n        resolve();\r\n      } else if (!this.googleScriptIsLoading) {\r\n\r\n        this.googleScriptIsLoading = true;\r\n\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://www.gstatic.com/charts/loader.js';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onload = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(true);\r\n          resolve();\r\n        };\r\n        script.onerror = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(false);\r\n          reject();\r\n        };\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n\r\n      } else {\r\n        this.googleScriptLoadingNotifier.subscribe((loaded: boolean) => {\r\n          if (loaded) {\r\n            resolve();\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n}\r\n",
    "declare var google: any;\r\n\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\r\nimport { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\r\nimport { CountriesData, SelectionExtra, Selection } from './data-types.interface';\r\nimport { en as countriesEN } from '@jagomf/countrieslist';\r\n\r\nconst valueHolder = 'value';\r\nconst countryName = (countryCode: string): string => {\r\n  return countriesEN[countryCode];\r\n};\r\n\r\n@Component({\r\n  selector: 'countries-map',\r\n  template: `<div class=\"major-block loading\" *ngIf=\"loading\"><span class=\"text\">Loading map...</span></div>\n\n<div class=\"major-block cm-map-content\" [ngClass]=\"{'goes-first': captionBelow}\"></div>\n\n<div class=\"major-block cm-caption-container\" [ngClass]=\"{'goes-first': !captionBelow}\"\n  *ngIf=\"!loading && showCaption\">\n  <div class=\"cm-simple-caption\">\n    <div class=\"cm-country-label\">\n      <span class=\"cm-default-label\" *ngIf=\"!selection\">{{countryLabel}}</span>\n      <span class=\"cm-country-name\" *ngIf=\"selection\">{{selection?.countryName}}</span>\n    </div>\n    <div class=\"cm-value-label\">\n      <span class=\"cm-value-text\"\n        [ngClass]=\"{'has-value': selection}\">{{valueLabel}}<span *ngIf=\"selection\">: </span></span>\n      <span class=\"cm-value-content\" *ngIf=\"selection\">{{selectionValue}}</span>\n    </div>\n  </div>\n  <div class=\"cm-extended-caption\" *ngIf=\"selection?.extra && selection?.extra.length > 0\">\n    <div *ngFor=\"let item of selection?.extra\" class=\"cm-extended-item\">\n      <span class=\"cm-extended-label\">{{item.key}}</span>:\n      <span class=\"cm-extended-value\">{{item.val}}</span>\n    </div>\n  </div>\n</div>\n`,\r\n  styles: [`:host{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-ms-flex-line-pack:stretch;align-content:stretch}.major-block.loading{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:center;align-self:center}.loading .text{font-style:italic;font-family:sans-serif;color:gray}.major-block.cm-map-content{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.major-block.goes-first{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.major-block:not(.goes-first){-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.major-block.cm-caption-container{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.cm-simple-caption{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.cm-country-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:start;align-self:flex-start}.cm-value-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:end;align-self:flex-end}.cm-country-label,.cm-value-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.cm-country-label .cm-country-name{font-weight:700}.cm-country-label .cm-country-name,.cm-value-label .cm-value-text{color:#333}.cm-country-label .cm-default-label,.cm-value-label .cm-value-text:not(.has-value){font-style:italic;color:#777}.cm-extended-caption{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));grid-gap:5px}.cm-extended-item{margin:5px auto}.cm-extended-item .cm-extended-label{font-weight:700}`]\r\n})\r\nexport class CountriesMapComponent implements OnChanges {\r\n\r\n  @Input() public data: CountriesData;\r\n  @Input() public apiKey: string;\r\n  @Input() public options: any;\r\n  @Input() public countryLabel = 'Country';\r\n  @Input() public valueLabel = 'Value';\r\n  @Input() public showCaption = true;\r\n  @Input() public captionBelow = true;\r\n  @Input() public minValue = 0;\r\n  @Input() public maxValue: number;\r\n  @Input() public minColor = 'white';\r\n  @Input() public maxColor = 'red';\r\n  @Input() public noDataColor = '#CFCFCF';\r\n  @Input() public exceptionColor = '#FFEE58';\r\n\r\n  @Output() public chartReady: EventEmitter<void>;\r\n  @Output() public chartError: EventEmitter<ChartErrorEvent>;\r\n  @Output() public chartSelect: EventEmitter<ChartSelectEvent>;\r\n\r\n  googleData: string[][];\r\n  wrapper: any;\r\n  selection: Selection | null = null;\r\n  loading = true;\r\n  get selectionValue() {\r\n    return this.data[this.selection.countryId].value;\r\n  }\r\n\r\n  public constructor(\r\n    private el: ElementRef,\r\n    private loaderService: GoogleChartsLoaderService\r\n  ) {\r\n    this.el = el;\r\n    this.loaderService = loaderService;\r\n    this.chartSelect = new EventEmitter();\r\n    this.chartReady = new EventEmitter();\r\n    this.chartError = new EventEmitter();\r\n  }\r\n\r\n  private getExtraSelected(country: string): SelectionExtra[] | null {\r\n    const { extra } = this.data[country];\r\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\r\n  }\r\n\r\n  private selectCountry(country?: string): void {\r\n    this.selection = country ? {\r\n      countryId: country,\r\n      countryName: countryName(country),\r\n      extra: this.getExtraSelected(country)\r\n    } : null;\r\n  }\r\n\r\n  /**\r\n   * Pasar de una tabla en forma\r\n   * { GB: { value:123, ...otherdata }, ES: { value:456, ...whatever } }\r\n   * a un array para Google Charts en forma\r\n   * [ ['Country', 'Value'], ['GB', 123], ['ES', 456] ]\r\n   * y almacernarlo en this.processedData\r\n   */\r\n  private processInputData(): void {\r\n    this.googleData = Object.keys(this.data).reduce((acc, currKey) => {\r\n      const currVal = this.data[currKey][valueHolder];\r\n      acc.push([currKey, <string>currVal]);\r\n      return acc;\r\n    }, [['Country', 'Value']]);\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    const key = 'data';\r\n    if (changes[key]) {\r\n\r\n      if (!this.data) {\r\n        return;\r\n      }\r\n\r\n      const defaultOptions = {\r\n        colorAxis: {\r\n          colors: [this.minColor, this.maxColor],\r\n          minValue: Number.isInteger(this.minValue) ? this.minValue : undefined,\r\n          maxValue: Number.isInteger(this.maxValue) ? this.maxValue : undefined\r\n        },\r\n        datalessRegionColor: this.noDataColor,\r\n        defaultColor: this.exceptionColor,\r\n        legend: this.showCaption,\r\n        tooltip: { trigger: 'none' }\r\n      };\r\n\r\n      this.loaderService.load(this.apiKey).then(() => {\r\n        this.processInputData();\r\n\r\n        this.wrapper = new google.visualization.ChartWrapper({\r\n          chartType: 'GeoChart',\r\n          dataTable: this.googleData,\r\n          options: Object.assign(defaultOptions, this.options)\r\n        });\r\n\r\n        this.registerChartWrapperEvents();\r\n        this.redraw();\r\n      });\r\n    }\r\n  }\r\n\r\n  public redraw(): void {\r\n    this.wrapper.draw(this.el.nativeElement.querySelector('div.cm-map-content'));\r\n  }\r\n\r\n  private onChartReady(): void {\r\n    this.loading = false;\r\n    this.chartReady.emit();\r\n  }\r\n\r\n  private onCharterror(error: any): void {\r\n    this.chartError.emit(error as ChartErrorEvent);\r\n  }\r\n\r\n  private onMapSelect(): void {\r\n    const event: ChartSelectEvent = {\r\n      selected: false,\r\n      value: null,\r\n      country: null\r\n    };\r\n\r\n    const selection: any[] = this.wrapper.visualization.getSelection();\r\n\r\n    if (selection.length > 0) {\r\n      const { row: tableRow }: { row: number } = selection[0];\r\n      const dataTable = this.wrapper.getDataTable();\r\n\r\n      event.selected = true;\r\n      event.value = dataTable.getValue(tableRow, 1);\r\n      event.country = dataTable.getValue(tableRow, 0);\r\n      this.selectCountry(event.country);\r\n\r\n    } else {\r\n      this.selectCountry(null);\r\n    }\r\n\r\n    this.chartSelect.emit(event);\r\n  }\r\n\r\n  private registerChartWrapperEvents(): void {\r\n    const { addListener } = google.visualization.events;\r\n    addListener(this.wrapper, 'ready', this.onChartReady.bind(this));\r\n    addListener(this.wrapper, 'error', this.onCharterror.bind(this));\r\n    addListener(this.wrapper, 'select', this.onMapSelect.bind(this));\r\n  }\r\n\r\n}\r\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapComponent } from './countries-map.component';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapComponent],\n  entryComponents: [CountriesMapComponent],\n  providers: [GoogleChartsLoaderService],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n"
  ],
  "names": [
    "GoogleChartsLoaderService",
    "localeId",
    "this",
    "googleScriptLoadingNotifier",
    "EventEmitter",
    "googleScriptIsLoading",
    "prototype",
    "load",
    "apiKey",
    "_this",
    "Promise",
    "resolve",
    "reject",
    "loadGoogleChartsScript",
    "then",
    "initializer",
    "packages",
    "language",
    "callback",
    "mapsApiKey",
    "google",
    "charts",
    "catch",
    "err",
    "subscribe",
    "loaded",
    "script",
    "document",
    "createElement",
    "type",
    "src",
    "async",
    "defer",
    "onload",
    "emit",
    "onerror",
    "getElementsByTagName",
    "appendChild",
    "Injectable",
    "undefined",
    "decorators",
    "Inject",
    "args",
    "LOCALE_ID",
    "CountriesMapComponent",
    "el",
    "loaderService",
    "countryLabel",
    "valueLabel",
    "showCaption",
    "captionBelow",
    "minValue",
    "minColor",
    "maxColor",
    "noDataColor",
    "exceptionColor",
    "selection",
    "loading",
    "chartSelect",
    "chartReady",
    "chartError",
    "Object",
    "defineProperty",
    "get",
    "data",
    "countryId",
    "value",
    "getExtraSelected",
    "country",
    "extra",
    "keys",
    "map",
    "key",
    "val",
    "selectCountry",
    "countryCode",
    "countryName",
    "countriesEN",
    "processInputData",
    "googleData",
    "reduce",
    "acc",
    "currKey",
    "currVal",
    "push",
    "ngOnChanges",
    "changes",
    "defaultOptions_1",
    "colorAxis",
    "colors",
    "Number",
    "isInteger",
    "maxValue",
    "datalessRegionColor",
    "defaultColor",
    "legend",
    "tooltip",
    "trigger",
    "wrapper",
    "visualization",
    "ChartWrapper",
    "chartType",
    "dataTable",
    "options",
    "assign",
    "registerChartWrapperEvents",
    "redraw",
    "draw",
    "nativeElement",
    "querySelector",
    "onChartReady",
    "onCharterror",
    "error",
    "onMapSelect",
    "event",
    "selected",
    "getSelection",
    "length",
    "tableRow",
    "row",
    "getDataTable",
    "getValue",
    "addListener",
    "events",
    "bind",
    "Component",
    "selector",
    "template",
    "styles",
    "ElementRef",
    "Input",
    "Output",
    "CountriesMapModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "entryComponents",
    "providers",
    "exports"
  ],
  "mappings": "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"
}
