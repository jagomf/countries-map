{
  "version": 3,
  "file": "countries-map.umd.js",
  "sources": [
    "ng://countries-map/out/app/modules/countries-map/countries-map.module.ts",
    "ng://countries-map/out/app/modules/countries-map/countries-map.component.ts",
    "ng://countries-map/out/app/modules/countries-map/google-charts-loader.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapComponent } from './countries-map.component';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapComponent],\n  entryComponents: [CountriesMapComponent],\n  providers: [GoogleChartsLoaderService],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n",
    "declare var google: any;\r\n\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\r\nimport { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\r\nimport { CountriesData, SelectionExtra, Selection } from './data-types.interface';\r\nimport { en as countriesEN } from '@jagomf/countrieslist';\r\n\r\nconst valueHolder = 'value';\r\nconst countryName = (countryCode: string): string => {\r\n  return countriesEN[countryCode];\r\n};\r\n\r\n@Component({\r\n  selector: 'countries-map',\r\n  template: `<div class=\"major-block loading\" *ngIf=\"loading\"><span class=\"text\">Loading map...</span></div>\n\n<div class=\"major-block cm-map-content\" [ngClass]=\"{'goes-first': captionBelow}\"></div>\n\n<div class=\"major-block cm-caption-container\" [ngClass]=\"{'goes-first': !captionBelow}\"\n  *ngIf=\"!loading && showCaption\">\n  <div class=\"cm-simple-caption\">\n    <div class=\"cm-country-label\">\n      <span class=\"cm-default-label\" *ngIf=\"!selection\">{{countryLabel}}</span>\n      <span class=\"cm-country-name\" *ngIf=\"selection\">{{selection?.countryName}}</span>\n    </div>\n    <div class=\"cm-value-label\">\n      <span class=\"cm-value-text\"\n        [ngClass]=\"{'has-value': selection}\">{{valueLabel}}<span *ngIf=\"selection\">: </span></span>\n      <span class=\"cm-value-content\" *ngIf=\"selection\">{{selectionValue}}</span>\n    </div>\n  </div>\n  <div class=\"cm-extended-caption\" *ngIf=\"selection?.extra && selection?.extra.length > 0\">\n    <div *ngFor=\"let item of selection?.extra\" class=\"cm-extended-item\">\n      <span class=\"cm-extended-label\">{{item.key}}</span>:\n      <span class=\"cm-extended-value\">{{item.val}}</span>\n    </div>\n  </div>\n</div>\n`,\r\n  styles: [`:host{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-ms-flex-line-pack:stretch;align-content:stretch}.major-block.loading{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:center;align-self:center}.loading .text{font-style:italic;font-family:sans-serif;color:gray}.major-block.cm-map-content{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.major-block.goes-first{-webkit-box-ordinal-group:1;-ms-flex-order:0;order:0}.major-block:not(.goes-first){-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}.major-block.cm-caption-container{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-flow:column nowrap;flex-flow:column nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.cm-simple-caption{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.cm-country-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:start;align-self:flex-start}.cm-value-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-ms-flex-item-align:end;align-self:flex-end}.cm-country-label,.cm-value-label{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto}.cm-country-label .cm-country-name{font-weight:700}.cm-country-label .cm-country-name,.cm-value-label .cm-value-text{color:#333}.cm-country-label .cm-default-label,.cm-value-label .cm-value-text:not(.has-value){font-style:italic;color:#777}.cm-extended-caption{display:grid;grid-template-columns:repeat(auto-fill,minmax(120px,1fr));grid-gap:5px}.cm-extended-item{margin:5px auto}.cm-extended-item .cm-extended-label{font-weight:700}`]\r\n})\r\nexport class CountriesMapComponent implements OnChanges {\r\n\r\n  @Input() public data: CountriesData;\r\n  @Input() public apiKey: string;\r\n  @Input() public options: any;\r\n  @Input() public countryLabel = 'Country';\r\n  @Input() public valueLabel = 'Value';\r\n  @Input() public showCaption = true;\r\n  @Input() public captionBelow = true;\r\n  @Input() public minValue = 0;\r\n  @Input() public maxValue: number;\r\n  @Input() public minColor = 'white';\r\n  @Input() public maxColor = 'red';\r\n  @Input() public noDataColor = '#CFCFCF';\r\n  @Input() public exceptionColor = '#FFEE58';\r\n\r\n  @Output() public chartReady: EventEmitter<void>;\r\n  @Output() public chartError: EventEmitter<ChartErrorEvent>;\r\n  @Output() public chartSelect: EventEmitter<ChartSelectEvent>;\r\n\r\n  googleData: string[][];\r\n  wrapper: any;\r\n  selection: Selection | null = null;\r\n  loading = true;\r\n  get selectionValue() {\r\n    return this.data[this.selection.countryId].value;\r\n  }\r\n\r\n  public constructor(\r\n    private el: ElementRef,\r\n    private loaderService: GoogleChartsLoaderService\r\n  ) {\r\n    this.el = el;\r\n    this.loaderService = loaderService;\r\n    this.chartSelect = new EventEmitter();\r\n    this.chartReady = new EventEmitter();\r\n    this.chartError = new EventEmitter();\r\n  }\r\n\r\n  private getExtraSelected(country: string): SelectionExtra[] | null {\r\n    const { extra } = this.data[country];\r\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\r\n  }\r\n\r\n  private selectCountry(country?: string): void {\r\n    this.selection = country ? {\r\n      countryId: country,\r\n      countryName: countryName(country),\r\n      extra: this.getExtraSelected(country)\r\n    } : null;\r\n  }\r\n\r\n  /**\r\n   * Pasar de una tabla en forma\r\n   * { GB: { value:123, ...otherdata }, ES: { value:456, ...whatever } }\r\n   * a un array para Google Charts en forma\r\n   * [ ['Country', 'Value'], ['GB', 123], ['ES', 456] ]\r\n   * y almacernarlo en this.processedData\r\n   */\r\n  private processInputData(): void {\r\n    this.googleData = Object.keys(this.data).reduce((acc, currKey) => {\r\n      const currVal = this.data[currKey][valueHolder];\r\n      acc.push([currKey, <string>currVal]);\r\n      return acc;\r\n    }, [['Country', 'Value']]);\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    const key = 'data';\r\n    if (changes[key]) {\r\n\r\n      if (!this.data) {\r\n        return;\r\n      }\r\n\r\n      const defaultOptions = {\r\n        colorAxis: {\r\n          colors: [this.minColor, this.maxColor],\r\n          minValue: Number.isInteger(this.minValue) ? this.minValue : undefined,\r\n          maxValue: Number.isInteger(this.maxValue) ? this.maxValue : undefined\r\n        },\r\n        datalessRegionColor: this.noDataColor,\r\n        defaultColor: this.exceptionColor,\r\n        legend: this.showCaption,\r\n        tooltip: { trigger: 'none' }\r\n      };\r\n\r\n      this.loaderService.load(this.apiKey).then(() => {\r\n        this.processInputData();\r\n\r\n        this.wrapper = new google.visualization.ChartWrapper({\r\n          chartType: 'GeoChart',\r\n          dataTable: this.googleData,\r\n          options: Object.assign(defaultOptions, this.options)\r\n        });\r\n\r\n        this.registerChartWrapperEvents();\r\n        this.redraw();\r\n      });\r\n    }\r\n  }\r\n\r\n  public redraw(): void {\r\n    this.wrapper.draw(this.el.nativeElement.querySelector('div.cm-map-content'));\r\n  }\r\n\r\n  private onChartReady(): void {\r\n    this.loading = false;\r\n    this.chartReady.emit();\r\n  }\r\n\r\n  private onCharterror(error: any): void {\r\n    this.chartError.emit(error as ChartErrorEvent);\r\n  }\r\n\r\n  private onMapSelect(): void {\r\n    const event: ChartSelectEvent = {\r\n      selected: false,\r\n      value: null,\r\n      country: null\r\n    };\r\n\r\n    const selection: any[] = this.wrapper.visualization.getSelection();\r\n\r\n    if (selection.length > 0) {\r\n      const { row: tableRow }: { row: number } = selection[0];\r\n      const dataTable = this.wrapper.getDataTable();\r\n\r\n      event.selected = true;\r\n      event.value = dataTable.getValue(tableRow, 1);\r\n      event.country = dataTable.getValue(tableRow, 0);\r\n      this.selectCountry(event.country);\r\n\r\n    } else {\r\n      this.selectCountry(null);\r\n    }\r\n\r\n    this.chartSelect.emit(event);\r\n  }\r\n\r\n  private registerChartWrapperEvents(): void {\r\n    const { addListener } = google.visualization.events;\r\n    addListener(this.wrapper, 'ready', this.onChartReady.bind(this));\r\n    addListener(this.wrapper, 'error', this.onCharterror.bind(this));\r\n    addListener(this.wrapper, 'select', this.onMapSelect.bind(this));\r\n  }\r\n\r\n}\r\n",
    "declare var google: any;\r\n\r\nimport { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GoogleChartsLoaderService {\r\n\r\n  private googleScriptLoadingNotifier: EventEmitter<boolean>;\r\n  private googleScriptIsLoading: boolean;\r\n  private localeId: string;\r\n\r\n  public constructor(@Inject(LOCALE_ID) localeId: string) {\r\n    this.googleScriptLoadingNotifier = new EventEmitter();\r\n    this.googleScriptIsLoading = false;\r\n    this.localeId = localeId;\r\n  }\r\n\r\n  public load(apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.loadGoogleChartsScript().then(() => {\r\n        const initializer: any = {\r\n            packages: ['geochart'],\r\n            language: this.localeId,\r\n            callback: resolve\r\n        };\r\n        if (apiKey) {\r\n          initializer.mapsApiKey = apiKey;\r\n        }\r\n        google.charts.load('45.2', initializer);\r\n      }).catch(err => reject());\r\n    });\r\n  }\r\n\r\n  private loadGoogleChartsScript(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (typeof google !== 'undefined' && google.charts) {\r\n        resolve();\r\n      } else if (!this.googleScriptIsLoading) {\r\n\r\n        this.googleScriptIsLoading = true;\r\n\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://www.gstatic.com/charts/loader.js';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onload = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(true);\r\n          resolve();\r\n        };\r\n        script.onerror = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(false);\r\n          reject();\r\n        };\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n\r\n      } else {\r\n        this.googleScriptLoadingNotifier.subscribe((loaded: boolean) => {\r\n          if (loaded) {\r\n            resolve();\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n}\r\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "ElementRef",
    "Component",
    "EventEmitter",
    "countriesEN",
    "Inject",
    "LOCALE_ID",
    "Injectable"
  ],
  "mappings": "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"
}
