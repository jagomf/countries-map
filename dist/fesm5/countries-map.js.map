{"version":3,"file":"countries-map.js","sources":["ng://countries-map/app/modules/countries-map/google-charts-loader.service.ts","ng://countries-map/app/modules/countries-map/countries-map.component.ts","ng://countries-map/app/modules/countries-map/countries-map.module.ts","ng://countries-map/countries-map.ts"],"sourcesContent":["declare var google: any;\n\nimport { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\n\n@Injectable()\nexport class GoogleChartsLoaderService {\n\n  private googleScriptLoadingNotifier: EventEmitter<boolean>;\n  private googleScriptIsLoading: boolean;\n  private localeId: string;\n\n  public constructor(@Inject(LOCALE_ID) localeId: string) {\n    this.googleScriptLoadingNotifier = new EventEmitter();\n    this.googleScriptIsLoading = false;\n    this.localeId = localeId;\n  }\n\n  public load(apiKey?: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n\n      this.loadGoogleChartsScript().then(() => {\n        const initializer: any = {\n            packages: ['geochart'],\n            language: this.localeId,\n            callback: resolve\n        };\n        if (apiKey) {\n          initializer.mapsApiKey = apiKey;\n        }\n        google.charts.load('45.2', initializer);\n      }).catch(err => reject());\n    });\n  }\n\n  private loadGoogleChartsScript(): Promise<any> {\n    return new Promise((resolve, reject) => {\n\n      if (typeof google !== 'undefined' && google.charts) {\n        resolve();\n      } else if (!this.googleScriptIsLoading) {\n\n        this.googleScriptIsLoading = true;\n\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://www.gstatic.com/charts/loader.js';\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(true);\n          resolve();\n        };\n        script.onerror = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(false);\n          reject();\n        };\n        document.getElementsByTagName('head')[0].appendChild(script);\n\n      } else {\n        this.googleScriptLoadingNotifier.subscribe((loaded: boolean) => {\n          if (loaded) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n\n    });\n  }\n}\n","declare var google: any;\n\nimport {\n  Component,\n  ElementRef,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter\n} from '@angular/core';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\nimport { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\nimport { CountriesData, SelectionExtra, Selection } from './data-types.interface';\nimport { en as countriesEN } from '@jagomf/countrieslist';\n\nconst valueHolder = 'value';\nconst countryName = (countryCode: string): string => {\n  return countriesEN[countryCode];\n};\n\n@Component({\n  selector: 'countries-map',\n  templateUrl: './countries-map.component.html',\n  styleUrls: ['./countries-map.component.css']\n})\nexport class CountriesMapComponent implements OnChanges {\n\n  @Input() public data: CountriesData;\n  @Input() public apiKey: string;\n  @Input() public options: any;\n  @Input() public countryLabel = 'Country';\n  @Input() public valueLabel = 'Value';\n  @Input() public showCaption = true;\n  @Input() public captionBelow = true;\n  @Input() public minValue = 0;\n  @Input() public maxValue: number;\n  @Input() public minColor = 'white';\n  @Input() public maxColor = 'red';\n  @Input() public noDataColor = '#CFCFCF';\n  @Input() public exceptionColor = '#FFEE58';\n\n  @Output() public chartReady: EventEmitter<void>;\n  @Output() public chartError: EventEmitter<ChartErrorEvent>;\n  @Output() public chartSelect: EventEmitter<ChartSelectEvent>;\n\n  googleData: string[][];\n  wrapper: any;\n  selection: Selection | null = null;\n  loading = true;\n  get selectionValue() {\n    return this.data[this.selection.countryId].value;\n  }\n\n  public constructor(\n    private el: ElementRef,\n    private loaderService: GoogleChartsLoaderService\n  ) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.chartSelect = new EventEmitter();\n    this.chartReady = new EventEmitter();\n    this.chartError = new EventEmitter();\n  }\n\n  private getExtraSelected(country: string): SelectionExtra[] | null {\n    const { extra } = this.data[country];\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\n  }\n\n  private selectCountry(country?: string): void {\n    this.selection = country ? {\n      countryId: country,\n      countryName: countryName(country),\n      extra: this.getExtraSelected(country)\n    } : null;\n  }\n\n  /**\n   * Pasar de una tabla en forma\n   * { GB: { value:123, ...otherdata }, ES: { value:456, ...whatever } }\n   * a un array para Google Charts en forma\n   * [ ['Country', 'Value'], ['GB', 123], ['ES', 456] ]\n   * y almacernarlo en this.processedData\n   */\n  private processInputData(): void {\n    this.googleData = Object.keys(this.data).reduce((acc, currKey) => {\n      const currVal = this.data[currKey][valueHolder];\n      acc.push([currKey, <string>currVal]);\n      return acc;\n    }, [['Country', 'Value']]);\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    const key = 'data';\n    if (changes[key]) {\n\n      if (!this.data) {\n        return;\n      }\n\n      const defaultOptions = {\n        colorAxis: {\n          colors: [this.minColor, this.maxColor],\n          minValue: Number.isInteger(this.minValue) ? this.minValue : undefined,\n          maxValue: Number.isInteger(this.maxValue) ? this.maxValue : undefined\n        },\n        datalessRegionColor: this.noDataColor,\n        defaultColor: this.exceptionColor,\n        legend: this.showCaption,\n        tooltip: { trigger: 'none' }\n      };\n\n      this.loaderService.load(this.apiKey).then(() => {\n        this.processInputData();\n\n        this.wrapper = new google.visualization.ChartWrapper({\n          chartType: 'GeoChart',\n          dataTable: this.googleData,\n          options: Object.assign(defaultOptions, this.options)\n        });\n\n        this.registerChartWrapperEvents();\n        this.redraw();\n      });\n    }\n  }\n\n  public redraw(): void {\n    this.wrapper.draw(this.el.nativeElement.querySelector('div.cm-map-content'));\n  }\n\n  private onChartReady(): void {\n    this.loading = false;\n    this.chartReady.emit();\n  }\n\n  private onCharterror(error: any): void {\n    this.chartError.emit(error as ChartErrorEvent);\n  }\n\n  private onMapSelect(): void {\n    const event: ChartSelectEvent = {\n      selected: false,\n      value: null,\n      country: null\n    };\n\n    const selection: any[] = this.wrapper.visualization.getSelection();\n\n    if (selection.length > 0) {\n      const { row: tableRow }: { row: number } = selection[0];\n      const dataTable = this.wrapper.getDataTable();\n\n      event.selected = true;\n      event.value = dataTable.getValue(tableRow, 1);\n      event.country = dataTable.getValue(tableRow, 0);\n      this.selectCountry(event.country);\n\n    } else {\n      this.selectCountry(null);\n    }\n\n    this.chartSelect.emit(event);\n  }\n\n  private registerChartWrapperEvents(): void {\n    const { addListener } = google.visualization.events;\n    addListener(this.wrapper, 'ready', this.onChartReady.bind(this));\n    addListener(this.wrapper, 'error', this.onCharterror.bind(this));\n    addListener(this.wrapper, 'select', this.onMapSelect.bind(this));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapComponent } from './countries-map.component';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapComponent],\n  entryComponents: [CountriesMapComponent],\n  providers: [GoogleChartsLoaderService],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {GoogleChartsLoaderService as Éµa} from './app/modules/countries-map/google-charts-loader.service';"],"names":["tslib_1.__param","countriesEN","tslib_1.__decorate"],"mappings":"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"}