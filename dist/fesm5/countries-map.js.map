{"version":3,"file":"countries-map.js","sources":["ng://countries-map/app/modules/countries-map/google-charts-loader.service.ts","ng://countries-map/app/modules/countries-map/chart-events.interface.ts","ng://countries-map/app/modules/countries-map/countries-map.component.ts","ng://countries-map/app/modules/countries-map/countries-map.module.ts","ng://countries-map/countries-map.ts"],"sourcesContent":["declare var google: any;\r\n\r\nimport { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GoogleChartsLoaderService {\r\n\r\n  private googleScriptLoadingNotifier: EventEmitter<boolean>;\r\n  private googleScriptIsLoading: boolean;\r\n  private localeId: string;\r\n\r\n  public constructor(@Inject(LOCALE_ID) localeId: string) {\r\n    this.googleScriptLoadingNotifier = new EventEmitter();\r\n    this.googleScriptIsLoading = false;\r\n    this.localeId = localeId;\r\n  }\r\n\r\n  public load(apiKey?: string): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.loadGoogleChartsScript().then(() => {\r\n        const initializer: any = {\r\n            packages: ['geochart'],\r\n            language: this.localeId,\r\n            callback: resolve\r\n        };\r\n        if (apiKey) {\r\n          initializer.mapsApiKey = apiKey;\r\n        }\r\n        google.charts.load('45.2', initializer);\r\n      }).catch(err => reject());\r\n    });\r\n  }\r\n\r\n  private loadGoogleChartsScript(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      if (typeof google !== 'undefined' && google.charts) {\r\n        resolve();\r\n      } else if (!this.googleScriptIsLoading) {\r\n\r\n        this.googleScriptIsLoading = true;\r\n\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://www.gstatic.com/charts/loader.js';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onload = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(true);\r\n          resolve();\r\n        };\r\n        script.onerror = () => {\r\n          this.googleScriptIsLoading = false;\r\n          this.googleScriptLoadingNotifier.emit(false);\r\n          reject();\r\n        };\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n\r\n      } else {\r\n        this.googleScriptLoadingNotifier.subscribe((loaded: boolean) => {\r\n          if (loaded) {\r\n            resolve();\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      }\r\n\r\n    });\r\n  }\r\n}\r\n","export interface ChartSelectEvent {\r\n  selected: boolean;\r\n  value: number | null;\r\n  country: string;\r\n}\r\n\r\nexport enum CharErrorCode {loading = 'loading'}\r\n\r\nexport interface ChartErrorEvent {\r\n  id: string | CharErrorCode;\r\n  message: string;\r\n  detailedMessage?: string;\r\n  options?: Object;\r\n}\r\n","declare var google: any;\r\n\r\nimport {\r\n  Component,\r\n  ElementRef,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\r\nimport { ChartSelectEvent, ChartErrorEvent, CharErrorCode } from './chart-events.interface';\r\nimport { CountriesData, SelectionExtra, Selection } from './data-types.interface';\r\nimport { en as countriesEN } from '@jagomf/countrieslist';\r\n\r\nconst valueHolder = 'value';\r\nconst countryName = (countryCode: string): string => {\r\n  return countriesEN[countryCode];\r\n};\r\n\r\n@Component({\r\n  selector: 'countries-map',\r\n  templateUrl: './countries-map.component.html',\r\n  styleUrls: ['./countries-map.component.css']\r\n})\r\nexport class CountriesMapComponent implements OnChanges {\r\n\r\n  @Input() public data: CountriesData;\r\n  @Input() public apiKey: string;\r\n  @Input() public options: any;\r\n  @Input() public countryLabel = 'Country';\r\n  @Input() public valueLabel = 'Value';\r\n  @Input() public showCaption = true;\r\n  @Input() public captionBelow = true;\r\n  @Input() public minValue = 0;\r\n  @Input() public maxValue: number;\r\n  @Input() public minColor = 'white';\r\n  @Input() public maxColor = 'red';\r\n  @Input() public noDataColor = '#CFCFCF';\r\n  @Input() public exceptionColor = '#FFEE58';\r\n\r\n  @Output() public chartReady: EventEmitter<void>;\r\n  @Output() public chartError: EventEmitter<ChartErrorEvent>;\r\n  @Output() public chartSelect: EventEmitter<ChartSelectEvent>;\r\n\r\n  googleData: string[][];\r\n  wrapper: any;\r\n  selection: Selection | null = null;\r\n  loading = true;\r\n  get selectionValue() {\r\n    return this.data[this.selection.countryId].value;\r\n  }\r\n\r\n  public constructor(\r\n    private el: ElementRef,\r\n    private loaderService: GoogleChartsLoaderService\r\n  ) {\r\n    this.el = el;\r\n    this.loaderService = loaderService;\r\n    this.chartSelect = new EventEmitter();\r\n    this.chartReady = new EventEmitter();\r\n    this.chartError = new EventEmitter();\r\n  }\r\n\r\n  private getExtraSelected(country: string): SelectionExtra[] | null {\r\n    const { extra } = this.data[country];\r\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\r\n  }\r\n\r\n  private selectCountry(country?: string): void {\r\n    this.selection = country ? {\r\n      countryId: country,\r\n      countryName: countryName(country),\r\n      extra: this.getExtraSelected(country)\r\n    } : null;\r\n  }\r\n\r\n  /**\r\n   * Pasar de una tabla en forma\r\n   * `{ GB: { value:123, ...otherdata }, ES: { value:456, ...whatever } }`\r\n   * a un array para Google Charts en forma\r\n   * `[ ['Country', 'Value'], ['GB', 123], ['ES', 456] ]`\r\n   * y almacernarlo en this.processedData\r\n   */\r\n  private processInputData(): void {\r\n    this.googleData = Object.entries(this.data).reduce((acc, [key, val]) => {\r\n      const valContent = val[valueHolder].toString();\r\n      acc.push([key, valContent]);\r\n      return acc;\r\n    }, [['Country', 'Value']]);\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    const key = 'data';\r\n    if (changes[key]) {\r\n\r\n      if (!this.data) {\r\n        return;\r\n      }\r\n\r\n      const defaultOptions = {\r\n        colorAxis: {\r\n          colors: [this.minColor, this.maxColor],\r\n          minValue: Number.isInteger(this.minValue) ? this.minValue : undefined,\r\n          maxValue: Number.isInteger(this.maxValue) ? this.maxValue : undefined\r\n        },\r\n        datalessRegionColor: this.noDataColor,\r\n        defaultColor: this.exceptionColor,\r\n        legend: this.showCaption,\r\n        tooltip: { trigger: 'none' }\r\n      };\r\n\r\n      this.loaderService.load(this.apiKey).then(() => {\r\n        this.processInputData();\r\n\r\n        this.wrapper = new google.visualization.ChartWrapper({\r\n          chartType: 'GeoChart',\r\n          dataTable: this.googleData,\r\n          options: Object.assign(defaultOptions, this.options)\r\n        });\r\n\r\n        this.registerChartWrapperEvents();\r\n        this.redraw();\r\n      }, () => {\r\n        this.onCharterror({ id: CharErrorCode.loading, message: 'Could not load' });\r\n      });\r\n    }\r\n  }\r\n\r\n  public redraw(): void {\r\n    this.wrapper.draw(this.el.nativeElement.querySelector('div.cm-map-content'));\r\n  }\r\n\r\n  private onChartReady(): void {\r\n    this.loading = false;\r\n    this.chartReady.emit();\r\n  }\r\n\r\n  private onCharterror(error: ChartErrorEvent): void {\r\n    this.chartError.emit(error);\r\n  }\r\n\r\n  private onMapSelect(): void {\r\n    const event: ChartSelectEvent = {\r\n      selected: false,\r\n      value: null,\r\n      country: null\r\n    };\r\n\r\n    const selection: any[] = this.wrapper.visualization.getSelection();\r\n\r\n    if (selection.length > 0) {\r\n      const { row: tableRow }: { row: number } = selection[0];\r\n      const dataTable = this.wrapper.getDataTable();\r\n\r\n      event.selected = true;\r\n      event.value = dataTable.getValue(tableRow, 1);\r\n      event.country = dataTable.getValue(tableRow, 0);\r\n      this.selectCountry(event.country);\r\n\r\n    } else {\r\n      this.selectCountry(null);\r\n    }\r\n\r\n    this.chartSelect.emit(event);\r\n  }\r\n\r\n  private registerChartWrapperEvents(): void {\r\n    const { addListener } = google.visualization.events;\r\n    addListener(this.wrapper, 'ready', this.onChartReady.bind(this));\r\n    addListener(this.wrapper, 'error', this.onCharterror.bind(this));\r\n    addListener(this.wrapper, 'select', this.onMapSelect.bind(this));\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CountriesMapComponent } from './countries-map.component';\r\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [CountriesMapComponent],\r\n  entryComponents: [CountriesMapComponent],\r\n  providers: [GoogleChartsLoaderService],\r\n  exports: [\r\n    CountriesMapComponent\r\n  ]\r\n})\r\nexport class CountriesMapModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {GoogleChartsLoaderService as Éµa} from './app/modules/countries-map/google-charts-loader.service';"],"names":["tslib_1.__param","countriesEN","tslib_1.__decorate"],"mappings":"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"}