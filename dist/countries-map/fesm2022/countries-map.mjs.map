{"version":3,"file":"countries-map.mjs","sources":["../../../projects/lib/src/lib/chart-events.interface.ts","../../../projects/lib/src/lib/google-charts-loader.service.ts","../../../projects/lib/src/lib/countries-map.component.ts","../../../projects/lib/src/lib/countries-map.component.html","../../../projects/lib/src/lib/countries-map.module.ts","../../../projects/lib/src/countries-map.ts"],"sourcesContent":["export interface ChartSelectEvent {\n  selected: boolean;\n  value: number | null;\n  country: string;\n}\n\nexport enum CharErrorCode {loading = 'loading'}\n\nexport interface ChartErrorEvent {\n  id: string | CharErrorCode;\n  message: string;\n  detailedMessage?: string;\n  options?: object;\n}\n","import { Injectable, EventEmitter, LOCALE_ID, Inject } from '@angular/core';\n\nconst chartsVersion = '45.2';\nconst chartsScript = 'https://www.gstatic.com/charts/loader.js';\n\n@Injectable()\nexport class GoogleChartsLoaderService {\n\n  private readonly googleScriptLoadingNotifier = new EventEmitter<boolean>();\n  private googleScriptIsLoading = false;\n\n  constructor(@Inject(LOCALE_ID) private readonly localeId: string) {\n  }\n\n  async load(apiKey?: string): Promise<void> {\n    await this.loadGoogleChartsScript();\n    const initializer = {\n      packages: ['geochart'],\n      language: this.localeId\n    };\n    if (apiKey) {\n      return google.charts.load(chartsVersion, initializer, apiKey);\n    } else {\n      return google.charts.load(chartsVersion, initializer);\n    }\n  }\n\n  private loadGoogleChartsScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n\n      if (typeof google !== 'undefined' && google.charts) {\n        resolve();\n      } else if (!this.googleScriptIsLoading) {\n\n        this.googleScriptIsLoading = true;\n\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = chartsScript;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(true);\n          resolve();\n        };\n        script.onerror = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(false);\n          reject();\n        };\n        document.getElementsByTagName('head')[0].appendChild(script);\n\n      } else {\n        this.googleScriptLoadingNotifier.subscribe((loaded: boolean) => {\n          if (loaded) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n\n    });\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  OnChanges,\n  Input,\n  Output,\n  OnDestroy,\n  HostListener,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  EventEmitter\n} from '@angular/core';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\nimport { CharErrorCode } from './chart-events.interface';\nimport type { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\nimport type { CountriesData, SelectionExtra, Selection, ValidCountryData } from './data-types.interface';\nimport { en as countriesEN } from '@jagomf/countrieslist';\n\nconst valueHolder = 'value';\nconst countryName = (countryCode: string): string => {\n  return countriesEN[countryCode];\n};\n\n@Component({\n  selector: 'countries-map',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './countries-map.component.html',\n  styleUrls: ['./countries-map.component.scss']\n})\nexport class CountriesMapComponent implements OnChanges, OnDestroy {\n\n  @Input({ required: true }) data: CountriesData;\n  @Input() apiKey: string;\n  @Input() options: any;\n  @Input() countryLabel = 'Country';\n  @Input() valueLabel = 'Value';\n  @Input() showCaption = true;\n  @Input() captionBelow = true;\n  @Input() autoResize = false;\n  @Input() minValue = 0;\n  @Input() maxValue: number;\n  @Input() minColor = 'white';\n  @Input() maxColor = 'red';\n  @Input() backgroundColor = 'white';\n  @Input() noDataColor = '#CFCFCF';\n  @Input() exceptionColor = '#FFEE58';\n\n  @Output() private readonly chartReady = new EventEmitter<void>();\n  @Output() private readonly chartError = new EventEmitter<ChartErrorEvent>();\n  @Output() private readonly chartSelect = new EventEmitter<ChartSelectEvent>();\n\n  @ViewChild('mapContent', { static: false }) private readonly mapContent: ElementRef;\n\n  private proportion: number;\n  private googleData: ValidCountryData[][];\n  private wrapper: google.visualization.ChartWrapper;\n\n  selection: Selection | null = null;\n\n  private innerLoading = true;\n  get loading(): boolean {\n    return this.innerLoading;\n  }\n\n  get selectionValue(): ValidCountryData {\n    return this.data[this.selection.countryId].value;\n  }\n\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n    private readonly el: ElementRef,\n    private readonly loaderService: GoogleChartsLoaderService\n  ) {\n  }\n\n  @HostListener('window:deviceorientation')\n  @HostListener('window:resize')\n  screenSizeChanged(): void {\n    if (!this.loading && this.autoResize) {\n      const map: HTMLElement = this.mapContent.nativeElement;\n      map.style.setProperty('height', `${map.clientWidth * this.proportion}px`);\n      this.redraw();\n    }\n  }\n\n  private getExtraSelected(country: string): SelectionExtra[] | null {\n    const { extra } = this.data[country];\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\n  }\n\n  private selectCountry(country?: string): void {\n    this.selection = country ? {\n      countryId: country,\n      countryName: countryName(country),\n      extra: this.getExtraSelected(country)\n    } : null;\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Convert a table (object) formatted as\n   * `{ GB: { value:123, ...otherdata }, ES: { value:456, ...whatever } }`\n   * to an array for Google Charts formatted as\n   * `[ ['Country', 'Value'], ['GB', 123], ['ES', 456] ]`\n   * and save to this.processedData\n   */\n  private processInputData(): void {\n    this.googleData = Object.entries(this.data).reduce((acc, [key, val]) => {\n      const rawValContent = val[valueHolder];\n      acc.push([key, rawValContent === null ? null : rawValContent ? +rawValContent.toString() : 0]);\n      return acc;\n    }, [['Country', 'Value']] as ValidCountryData[][]);\n  }\n\n  ngOnChanges({ data }: { data: any }): void {\n    if (data) {\n\n      if (!this.data) {\n        return;\n      }\n\n      this.initializeMap({\n        //#region DEFAULTS (automatically set):\n        // displayMode: 'regions',\n        // region: 'world',\n        // enableRegionInteractivity: true,\n        // keepAspectRatio: true,\n        //#endregion\n        colorAxis: {\n          colors: [this.minColor, this.maxColor],\n          minValue: Number.isInteger(this.minValue) ? this.minValue : undefined,\n          maxValue: Number.isInteger(this.maxValue) ? this.maxValue : undefined\n        },\n        datalessRegionColor: this.noDataColor,\n        backgroundColor: this.backgroundColor,\n        defaultColor: this.exceptionColor,\n        legend: 'none',\n        tooltip: { trigger: 'none' }\n      });\n    }\n  }\n\n  private async initializeMap(defaultOptions: google.visualization.GeoChartOptions): Promise<void> {\n    try {\n      await this.loaderService.load(this.apiKey);\n\n      this.processInputData();\n\n      this.wrapper = new google.visualization.ChartWrapper({\n        chartType: 'GeoChart',\n        dataTable: this.googleData,\n        options: Object.assign(defaultOptions, this.options)\n      });\n\n      this.registerChartWrapperEvents();\n      this.redraw();\n\n      const self: HTMLElement = this.el.nativeElement;\n      this.proportion = self.clientHeight / self.clientWidth;\n    } catch (e) {\n      this.onCharterror({ id: CharErrorCode.loading, message: 'Could not load' });\n    }\n  }\n\n  redraw(): void {\n    this.wrapper.draw(this.el.nativeElement.querySelector('div.cm-map-content'));\n  }\n\n  private onChartReady(): void {\n    if (this.innerLoading) {\n      this.innerLoading = false;\n      this.chartReady.emit();\n    }\n  }\n\n  private onCharterror(error: ChartErrorEvent): void {\n    this.chartError.emit(error);\n  }\n\n  private onMapSelect(): void {\n    const event: ChartSelectEvent = {\n      selected: false,\n      value: null,\n      country: null\n    };\n\n    const selection = this.wrapper.getChart().getSelection();\n\n    if (selection.length > 0) {\n      const { row: tableRow } = selection[0];\n      const dataTable = this.wrapper.getDataTable();\n\n      event.selected = true;\n      event.value = dataTable.getValue(tableRow, 1);\n      event.country = dataTable.getValue(tableRow, 0);\n      this.selectCountry(event.country);\n\n    } else {\n      this.selectCountry(null);\n    }\n\n    this.chartSelect.emit(event);\n  }\n\n  private registerChartWrapperEvents(): void {\n    const { addListener } = google.visualization.events;\n    addListener(this.wrapper, 'ready', this.onChartReady.bind(this));\n    addListener(this.wrapper, 'error', this.onCharterror.bind(this));\n    addListener(this.wrapper, 'select', this.onMapSelect.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    const { removeListener } = google.visualization.events;\n    removeListener('ready');\n    removeListener('error');\n    removeListener('select');\n  }\n\n}\n","@if (loading) {\n<div class=\"major-block loading\"><span class=\"text\">Loading map...</span></div>\n}\n\n<div class=\"major-block cm-map-content\" #mapContent [ngClass]=\"{'goes-first': captionBelow}\"></div>\n\n@if (!loading && showCaption) {\n<div class=\"major-block cm-caption-container\" [ngClass]=\"{'goes-first': !captionBelow}\">\n  <div class=\"cm-simple-caption\">\n    <div class=\"cm-country-label\">\n      @if (selection) {\n        <span class=\"cm-country-name\">{{selection?.countryName}}</span>\n      } @else {\n        <span class=\"cm-default-label\">{{countryLabel}}</span>\n      }\n    </div>\n    <div class=\"cm-value-label\">\n      <span class=\"cm-value-text\"\n        [ngClass]=\"{'has-value': selection}\">{{valueLabel}}@if (selection) {<span>: </span>}</span>\n      @if (selection) {\n        <span class=\"cm-value-content\">{{selectionValue}}</span>\n      }\n    </div>\n  </div>\n  @if (selection?.extra?.length > 0) {\n    <div class=\"cm-extended-caption\">\n      @for (item of selection?.extra; track item.key) {\n        <div class=\"cm-extended-item\">\n          <span class=\"cm-extended-label\">{{item.key}}</span>:\n          <span class=\"cm-extended-value\">{{item.val}}</span>\n        </div>\n      }\n    </div>\n  }\n</div>\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapComponent } from './countries-map.component';\nimport { GoogleChartsLoaderService } from './google-charts-loader.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapComponent],\n  providers: [GoogleChartsLoaderService],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["countriesEN","i1.GoogleChartsLoaderService"],"mappings":"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"}