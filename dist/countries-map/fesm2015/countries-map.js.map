{"version":3,"file":"countries-map.js","sources":["../../../projects/lib/src/lib/base-map.component.ts","../../../projects/lib/src/lib/chart-events.interface.ts","../../../projects/lib/src/lib/countries-map.component.ts","../../../projects/lib/src/lib/countries-map.module.ts","../../../projects/lib/src/countries-map.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\n\n/**\n * @private Do not use this component in your app. Use `CountriesMapComponent` instead.\n */\n@Component({\n  selector: 'countries-map-base',\n  templateUrl: './base-map.component.svg',\n  styles: ['']\n})\nexport class CountriesMapBaseComponent {\n}\n","export interface ChartSelectEvent {\n  selected: boolean;\n  value?: number;\n  country: string;\n}\n\nexport enum CharErrorCode {loading = 'loading'}\n\nexport interface ChartErrorEvent {\n  id: string | CharErrorCode;\n  message: string;\n  detailedMessage?: string;\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  EventEmitter,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport { CharErrorCode } from './chart-events.interface';\nimport type { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\nimport type { CountriesData, SelectionExtra, DrawableCountries, Selection,\n  ValidExtraData, DrawableCountry, CountryData } from './data-types.interface';\nimport { en as countriesEN } from '@jagomf/countrieslist';\nimport { scale } from 'chroma-js';\n\nconst exists = item => typeof item !== 'undefined' && item !== null;\nconst countryNum = (item: CountryData) => parseInt(item.value?.toString());\n\nconst countryClass = 'countryxx';\nconst oceanId = 'ocean';\nconst getStrokeWidth = (isHovered: boolean) => isHovered ? '0.2%' : '0.1%';\nconst getStrokeColor = (isHovered: boolean) => isHovered ? '#888' : '#afafaf';\n\nconst countryName = (countryCode: string): string => {\n  return countriesEN[countryCode];\n};\n\n@Component({\n  selector: 'countries-map',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './countries-map.component.html',\n  styleUrls: ['./countries-map.component.scss']\n})\nexport class CountriesMapComponent implements AfterViewInit, OnChanges {\n\n  @Input() data: CountriesData;\n  @Input() countryLabel = 'Country';\n  @Input() valueLabel = 'Value';\n  @Input() showCaption = true;\n  @Input() captionBelow = true;\n  @Input() minValue: number;\n  @Input() maxValue: number;\n  @Input() minColor = 'white';\n  @Input() maxColor = 'red';\n  @Input() backgroundColor = 'white';\n  @Input() noDataColor = '#CFCFCF';\n  @Input() exceptionColor = '#FFEE58';\n\n  @Output() private readonly chartReady = new EventEmitter<void>();\n  @Output() private readonly chartError = new EventEmitter<ChartErrorEvent>();\n  @Output() private readonly chartSelect = new EventEmitter<ChartSelectEvent>();\n\n  @ViewChild('mapContent', { static: false, read: ElementRef }) private readonly mapContent: ElementRef<HTMLElement>;\n\n  mapData: DrawableCountries;\n  selection: Selection | null = null;\n\n  private innerLoading = true;\n  get loading(): boolean {\n    return this.innerLoading;\n  }\n\n  get selectionValue(): ValidExtraData {\n    return this.data[this.selection.countryId].value;\n  }\n\n  constructor(\n    private readonly cdRef: ChangeDetectorRef,\n  ) { }\n\n  private getExtraSelected(country: string): SelectionExtra[] | null {\n    const { extra } = this.data[country];\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\n  }\n\n  private selectCountry(country?: string): void {\n    this.selection = country ? {\n      countryId: country,\n      countryName: countryName(country),\n      extra: this.getExtraSelected(country)\n    } : null;\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializeMap();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const changedMapValueButNotOnStart = ['data', 'minColor', 'maxColor', 'backgroundColor', 'noDataColor', 'exceptionColor']\n      .some(attr => changes[attr] && !changes[attr].firstChange);\n\n    if (changedMapValueButNotOnStart) {\n      this.initializeMap();\n    }\n  }\n\n  private initializeMap(): void {\n    try {\n      // data is provided: might be able to paint countries in colors\n      if (this.data) {\n        // get highest value in range\n        const maxVal = exists(this.maxValue) ? this.maxValue : Object.values(this.data).reduce(\n          (acc, curr) => countryNum(curr) > acc || acc === null? countryNum(curr) : acc, null as number\n        );\n        // get lowest value in range\n        const minVal = exists(this.minValue) ? this.minValue : Object.values(this.data).reduce(\n          (acc, curr) => countryNum(curr) < acc || acc === null? countryNum(curr) : acc, null as number\n        );\n\n        // map values in range to colors\n        const valToCol = scale([this.minColor, this.maxColor]).colors((maxVal ?? 1) - (minVal ?? 0) + 1).reduce((acc, curr, i) =>\n          ({ ...acc, [i + minVal]: curr }), {} as { [key: number]: string }\n        );\n\n        // create local Map using provided data + calculated colors\n        this.mapData = Object.entries(this.data).reduce((acc, [ countryId, countryVal ]) =>\n          ({ ...acc,\n            [countryId.toLowerCase()]: {\n              ...countryVal,\n              color: valToCol[countryNum(countryVal)] // value in between minVal and maxVal\n                || (\n                  // value below minVal\n                  countryNum(countryVal) <= minVal ? valToCol[minVal] :\n                  // value above maxVal\n                  countryNum(countryVal) >= maxVal ? valToCol[maxVal]\n                  // weird; should never get to here\n                    : this.exceptionColor\n                )\n            } as DrawableCountry }),\n          {} as DrawableCountries\n        );\n\n      // no data provided: will paint plain map\n      } else {\n        this.mapData = {};\n      }\n\n      const svgMap = this.mapContent.nativeElement.children[0] as SVGSVGElement;\n      svgMap.style.backgroundColor = this.backgroundColor;\n      svgMap.querySelectorAll<SVGSVGElement>(`.${countryClass}`).forEach(item => {\n        const mapItem = this.mapData[item.id.toLowerCase()];\n        const isException = mapItem ? !exists(mapItem.value) : false;\n        item.style.fill = mapItem ? isException ? this.exceptionColor : mapItem.color : this.noDataColor;\n        item.onmouseenter = this.countryHover.bind(this, item, true);\n        item.onmouseleave = this.countryHover.bind(this, item, false);\n      });\n\n      this.innerLoading = false;\n      this.cdRef.detectChanges();\n      this.onChartReady();\n\n    } catch (e) {\n      this.onCharterror({ id: CharErrorCode.loading, message: 'Could not load' });\n    }\n  }\n\n  private countryHover(item: SVGElement, hovered: boolean): void {\n    item.style.strokeWidth = getStrokeWidth(hovered);\n    item.style.stroke = getStrokeColor(hovered);\n    item.querySelectorAll<SVGElement>('.landxx').forEach(i => {\n      i.style.strokeWidth = getStrokeWidth(hovered);\n      i.style.stroke = getStrokeColor(hovered);\n    });\n  }\n\n  private onChartReady(): void {\n    if (this.innerLoading) {\n      this.innerLoading = false;\n      this.chartReady.emit();\n    }\n  }\n\n  private onCharterror(error: ChartErrorEvent): void {\n    this.chartError.emit(error);\n  }\n\n  onMapSelect({ target }: { target?: SVGElement }): void {\n    const event: ChartSelectEvent = {\n      selected: false,\n      value: null,\n      country: null\n    };\n\n    let newItem: SVGElement;\n    if (target.id === oceanId) {\n      this.selectCountry(null);\n\n    } else {\n      newItem = target;\n      while (!newItem.classList.contains(countryClass)) {\n        newItem = newItem.parentNode as SVGElement;\n      }\n    }\n\n    const country = this.mapData[newItem?.id];\n    if (country) {\n      event.selected = true;\n      event.value = countryNum(country);\n      event.country = newItem.id.toUpperCase();\n      this.selectCountry(event.country);\n    } else {\n      this.selectCountry(null);\n    }\n    this.chartSelect.emit(event);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountriesMapBaseComponent } from './base-map.component';\nimport { CountriesMapComponent } from './countries-map.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [CountriesMapBaseComponent, CountriesMapComponent],\n  exports: [\n    CountriesMapComponent\n  ]\n})\nexport class CountriesMapModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CountriesMapBaseComponent as Éµa} from './lib/base-map.component';"],"names":["countriesEN"],"mappings":"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"}