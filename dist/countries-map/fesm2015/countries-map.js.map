{"version":3,"file":"countries-map.js","sources":["../../../projects/lib/src/lib/base-map.component.ts","../../../projects/lib/src/lib/chart-events.interface.ts","../../../projects/lib/src/lib/countries-map.component.ts","../../../projects/lib/src/lib/countries-map.module.ts","../../../projects/lib/src/countries-map.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\r\n\r\n/**\r\n * @private Do not use this component in your app. Use `CountriesMapComponent` instead.\r\n */\r\n@Component({\r\n  selector: 'countries-map-base',\r\n  templateUrl: './base-map.component.svg',\r\n  styles: ['']\r\n})\r\nexport class CountriesMapBaseComponent {\r\n}\r\n","export interface ChartSelectEvent {\r\n  selected: boolean;\r\n  value?: number;\r\n  country: string;\r\n}\r\n\r\nexport enum CharErrorCode {loading = 'loading'}\r\n\r\nexport interface ChartErrorEvent {\r\n  id: string | CharErrorCode;\r\n  message: string;\r\n  detailedMessage?: string;\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { CharErrorCode } from './chart-events.interface';\r\nimport type { ChartSelectEvent, ChartErrorEvent } from './chart-events.interface';\r\nimport type { CountriesData, SelectionExtra, DrawableCountries, Selection,\r\n  ValidExtraData, DrawableCountry, CountryData } from './data-types.interface';\r\nimport { en as countriesEN } from '@jagomf/countrieslist';\r\nimport { scale } from 'chroma-js';\r\n\r\nconst exists = item => typeof item !== 'undefined' && item !== null;\r\nconst countryNum = (item: CountryData) => parseInt(item.value?.toString());\r\n\r\nconst countryClass = 'countryxx';\r\nconst oceanId = 'ocean';\r\nconst getStrokeWidth = (isHovered: boolean) => isHovered ? '0.2%' : '0.1%';\r\nconst getStrokeColor = (isHovered: boolean) => isHovered ? '#888' : '#afafaf';\r\n\r\nconst countryName = (countryCode: string): string => {\r\n  return countriesEN[countryCode];\r\n};\r\n\r\n@Component({\r\n  selector: 'countries-map',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './countries-map.component.html',\r\n  styleUrls: ['./countries-map.component.scss']\r\n})\r\nexport class CountriesMapComponent implements AfterViewInit, OnChanges {\r\n\r\n  @Input() data: CountriesData;\r\n  @Input() countryLabel = 'Country';\r\n  @Input() valueLabel = 'Value';\r\n  @Input() showCaption = true;\r\n  @Input() captionBelow = true;\r\n  @Input() minValue: number;\r\n  @Input() maxValue: number;\r\n  @Input() minColor = 'white';\r\n  @Input() maxColor = 'red';\r\n  @Input() backgroundColor = 'white';\r\n  @Input() noDataColor = '#CFCFCF';\r\n  @Input() exceptionColor = '#FFEE58';\r\n\r\n  @Output() private readonly chartReady = new EventEmitter<void>();\r\n  @Output() private readonly chartError = new EventEmitter<ChartErrorEvent>();\r\n  @Output() private readonly chartSelect = new EventEmitter<ChartSelectEvent>();\r\n\r\n  @ViewChild('mapContent', { static: false, read: ElementRef }) private readonly mapContent: ElementRef<HTMLElement>;\r\n\r\n  mapData: DrawableCountries;\r\n  selection: Selection | null = null;\r\n\r\n  private innerLoading = true;\r\n  get loading(): boolean {\r\n    return this.innerLoading;\r\n  }\r\n\r\n  get selectionValue(): ValidExtraData {\r\n    return this.data[this.selection.countryId].value;\r\n  }\r\n\r\n  constructor(\r\n    private readonly cdRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  private getExtraSelected(country: string): SelectionExtra[] | null {\r\n    const { extra } = this.data[country];\r\n    return extra && Object.keys(extra).map(key => ({ key, val: extra[key] }));\r\n  }\r\n\r\n  private selectCountry(country?: string): void {\r\n    this.selection = country ? {\r\n      countryId: country,\r\n      countryName: countryName(country),\r\n      extra: this.getExtraSelected(country)\r\n    } : null;\r\n    this.cdRef.detectChanges();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initializeMap();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const changedMapValueButNotOnStart = ['data', 'minColor', 'maxColor', 'backgroundColor', 'noDataColor', 'exceptionColor']\r\n      .some(attr => changes[attr] && !changes[attr].firstChange);\r\n\r\n    if (changedMapValueButNotOnStart) {\r\n      this.initializeMap();\r\n    }\r\n  }\r\n\r\n  private initializeMap(): void {\r\n    try {\r\n      // data is provided: might be able to paint countries in colors\r\n      if (this.data) {\r\n        // get highest value in range\r\n        const maxVal = exists(this.maxValue) ? this.maxValue : Object.values(this.data).reduce(\r\n          (acc, curr) => countryNum(curr) > acc || acc === null? countryNum(curr) : acc, null as number\r\n        );\r\n        // get lowest value in range\r\n        const minVal = exists(this.minValue) ? this.minValue : Object.values(this.data).reduce(\r\n          (acc, curr) => countryNum(curr) < acc || acc === null? countryNum(curr) : acc, null as number\r\n        );\r\n\r\n        // map values in range to colors\r\n        const valToCol = scale([this.minColor, this.maxColor]).colors((maxVal ?? 1) - (minVal ?? 0) + 1).reduce((acc, curr, i) =>\r\n          ({ ...acc, [i + minVal]: curr }), {} as { [key: number]: string }\r\n        );\r\n\r\n        // create local Map using provided data + calculated colors\r\n        this.mapData = Object.entries(this.data).reduce((acc, [ countryId, countryVal ]) =>\r\n          ({ ...acc,\r\n            [countryId.toLowerCase()]: {\r\n              ...countryVal,\r\n              color: valToCol[countryNum(countryVal)] // value in between minVal and maxVal\r\n                || (\r\n                  // value below minVal\r\n                  countryNum(countryVal) <= minVal ? valToCol[minVal] :\r\n                  // value above maxVal\r\n                  countryNum(countryVal) >= maxVal ? valToCol[maxVal]\r\n                  // weird; should never get to here\r\n                    : this.exceptionColor\r\n                )\r\n            } as DrawableCountry }),\r\n          {} as DrawableCountries\r\n        );\r\n\r\n      // no data provided: will paint plain map\r\n      } else {\r\n        this.mapData = {};\r\n      }\r\n\r\n      const svgMap = this.mapContent.nativeElement.children[0] as SVGSVGElement;\r\n      svgMap.style.backgroundColor = this.backgroundColor;\r\n      svgMap.querySelectorAll<SVGSVGElement>(`.${countryClass}`).forEach(item => {\r\n        const mapItem = this.mapData[item.id.toLowerCase()];\r\n        const isException = mapItem ? !exists(mapItem.value) : false;\r\n        item.style.fill = mapItem ? isException ? this.exceptionColor : mapItem.color : this.noDataColor;\r\n        item.onmouseenter = this.countryHover.bind(this, item, true);\r\n        item.onmouseleave = this.countryHover.bind(this, item, false);\r\n      });\r\n\r\n      this.innerLoading = false;\r\n      this.cdRef.detectChanges();\r\n      this.onChartReady();\r\n\r\n    } catch (e) {\r\n      this.onCharterror({ id: CharErrorCode.loading, message: 'Could not load' });\r\n    }\r\n  }\r\n\r\n  private countryHover(item: SVGElement, hovered: boolean): void {\r\n    item.style.strokeWidth = getStrokeWidth(hovered);\r\n    item.style.stroke = getStrokeColor(hovered);\r\n    item.querySelectorAll<SVGElement>('.landxx').forEach(i => {\r\n      i.style.strokeWidth = getStrokeWidth(hovered);\r\n      i.style.stroke = getStrokeColor(hovered);\r\n    });\r\n  }\r\n\r\n  private onChartReady(): void {\r\n    if (this.innerLoading) {\r\n      this.innerLoading = false;\r\n      this.chartReady.emit();\r\n    }\r\n  }\r\n\r\n  private onCharterror(error: ChartErrorEvent): void {\r\n    this.chartError.emit(error);\r\n  }\r\n\r\n  onMapSelect({ target }: { target?: SVGElement }): void {\r\n    const event: ChartSelectEvent = {\r\n      selected: false,\r\n      value: null,\r\n      country: null\r\n    };\r\n\r\n    let newItem: SVGElement;\r\n    if (target.id === oceanId) {\r\n      this.selectCountry(null);\r\n\r\n    } else {\r\n      newItem = target;\r\n      while (!newItem.classList.contains(countryClass)) {\r\n        newItem = newItem.parentNode as SVGElement;\r\n      }\r\n    }\r\n\r\n    const country = this.mapData[newItem?.id];\r\n    if (country) {\r\n      event.selected = true;\r\n      event.value = countryNum(country);\r\n      event.country = newItem.id.toUpperCase();\r\n      this.selectCountry(event.country);\r\n    } else {\r\n      this.selectCountry(null);\r\n    }\r\n    this.chartSelect.emit(event);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CountriesMapBaseComponent } from './base-map.component';\r\nimport { CountriesMapComponent } from './countries-map.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [CountriesMapBaseComponent, CountriesMapComponent],\r\n  exports: [\r\n    CountriesMapComponent\r\n  ]\r\n})\r\nexport class CountriesMapModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CountriesMapBaseComponent as Éµa} from './lib/base-map.component';"],"names":["countriesEN"],"mappings":"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"}